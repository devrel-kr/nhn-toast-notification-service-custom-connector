name: Continuous Deployment


on:
  workflow_call:
    inputs:
      action_name:
        required: true
        type: string
      function_apps:
        required: true
        type: string
        default: '["Sms", "Sms.Verification"]'
        description: function-app name array, format of a string JSON array
      tag:
        required: false
        type: string
        default: ""
    secrets:
      GITHUB_TOKEN:
        required: false
      AZURE_CREDENTIALS:
        required: false
      AZURE_ENVIRONMENT_CODE:
        required: false
      AZURE_LOCATION_CODE:
        required: false
      AZURE_RESOURCE_NAME:
        required: false

env:
  AZURE_RESOURCE_GROUP_NAME: 'rg-${{ secrets.AZURE_RESOURCE_NAME }}-${{ secrets.AZURE_ENVIRONMENT_CODE }}-${{ secrets.AZURE_LOCATION_CODE }}'

jobs:
  Pre-Work:
    runs-on: ubuntu-latest

    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Extract version from tag
      if: ${{ endsWith(inputs.action_name, 'github') }}    
      shell: pwsh
      run: |
        $version = (echo ${{ inputs.tag }}) -replace "refs/tags/", ""

        echo "RELEASE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append

    - name: Check environment variables
      if: ${{ endsWith(inputs.action_name, 'github') }}    
      shell: bash
      run: |
        echo ${{ env.RELEASE_VERSION }}

    - name: Checkout the repo
      uses: actions/checkout@v2  
    
    - name: Download FunctionApp artifacts
      uses: actions/download-artifact@v3

    - name: Create a GitHub release
      id: create_release
      if: ${{ endsWith(inputs.action_name, 'github') }}
      uses: softprops/action-gh-release@v1
      with:
        prerelease: false
        name: Release ${{ env.RELEASE_VERSION }}
        body_path: ${{ github.workspace }}/release-notes/${{ env.RELEASE_VERSION }}.md
        generate_release_notes: true

    - name: Sign in to Azure
      if: ${{ endsWith(inputs.action_name, 'azure') }}
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
  
  Continuous-Deployment:
    needs: 
    - Pre-Work

    strategy:
      matrix:
        app-name: ${{ fromJson(inputs.function_apps) }}

    runs-on: ubuntu-latest

    steps:
    - name: Add azure-function-app name to env
      shell: pwsh
      run: |
        $name = 'fncapp-${{ secrets.AZURE_RESOURCE_NAME }}-${{ matrix.app-name }}-${{ secrets.AZURE_ENVIRONMENT_CODE }}-${{ secrets.AZURE_LOCATION_CODE }}'

        echo "AZURE_FUNCTION_APP_NAME=$name" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append

    - name: Zip FunctionApp artifacts
      run: |
        cd ${{matrix.app-name}}
        zip ${{matrix.app-name}}.zip ./* -r
        cd ${{ github.workspace }}

        mkdir published
        mv ${{matrix.app-name}}/${{matrix.app-name}}.zip published/${{matrix.app-name}}.zip
      
    - name: Add release-version to zip
      if: ${{ endsWith(inputs.action_name, 'github') }}    
      run: |
        mv published/${{matrix.app-name}}.zip published/${{matrix.app-name}}-${{ env.RELEASE_VERSION }}.zip
  
    - name: Release FunctionApp artifact to GitHub
      if: ${{ endsWith(inputs.action_name, 'github') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.Pre-Work.outputs.release_url }}
        asset_path: published/${{matrix.app-name}}-${{ env.RELEASE_VERSION }}.zip
        asset_name: ${{matrix.app-name}}-${{ env.RELEASE_VERSION }}.zip
        asset_content_type: application/gzip

    - name: Deploy FunctionApp artifact to Azure
      if: ${{ endsWith(inputs.action_name, 'azure') }}
      shell: bash
      run: |
        az functionapp deploy \
          -g ${{ env.AZURE_RESOURCE_GROUP_NAME }} \
          -n ${{ env.AZURE_FUNCTION_APP_NAME }} \
          --src-path published/${{matrix.app-name}}.zip \
          --type zip \
          --verbose
